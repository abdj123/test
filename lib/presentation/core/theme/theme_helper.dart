import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = 'primary';

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      scaffoldBackgroundColor: const Color(0XFF121212),
      appBarTheme: const AppBarTheme(
        backgroundColor: Color(0XFF121212),
      ),
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 6,
        space: 6,
        color: appTheme.gray400,
      ),
      snackBarTheme: const SnackBarThemeData(
        actionTextColor: Colors.black,
        backgroundColor: Colors.white,
        contentTextStyle: TextStyle(color: Colors.black),
        elevation: 20,
      ),
      datePickerTheme: DatePickerThemeData(
        backgroundColor: Colors.white,
        headerBackgroundColor: colorScheme.primary,
        headerForegroundColor: Colors.white,
        dayForegroundColor: WidgetStateProperty.all(Colors.black),
        todayBackgroundColor: WidgetStateProperty.all(
          colorScheme.primary,
        ),
        todayForegroundColor: WidgetStateProperty.all(Colors.white),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w300,
        ),
        displayLarge: TextStyle(
          color: appTheme.cyanA100,
          fontSize: 48.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 25.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray100,
          fontSize: 9.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 18.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: const Color(0XFFF5F5F5),
          fontSize: 13.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w700,
        ),
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 13.sp,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray40001,
          fontSize: 8.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueGray700,
          fontSize: 27.sp,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.white900,
          fontSize: 22.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.white900,
          fontSize: 8.sp,
          fontFamily: 'Figtree',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF03BDBF),
    primaryContainer: Color(0XFF282828),
    secondaryContainer: Color(0XFF959595),

    // Error colors
    onErrorContainer: Color(0XFF111111),

    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFF6AFFF8),
    onSurface: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => const Color(0XFFFFC107);

  // Red
  Color get redColor => const Color(0xFFC31105);

  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD3D3D3);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray700 => const Color(0XFF515151);

  // Cyan
  Color get cyan600 => const Color(0XFF03BDBF);
  Color get cyanA100 => const Color(0XFF6AFFF8);

  // GrayB
  Color get gray600B2 => const Color(0XB2818181);

  // LightBlue
  Color get lightBlue600 => const Color(0XFF039BE5);
  Color get lightBlueA400 => const Color(0XFF00BEFD);

  // White
  Color get white100 => const Color(0XFF282828);
  Color get white900 => const Color(0XFFFFFFFF);

  // Blue
  Color get blue400 => const Color(0XFF4CB1FF);

  // Cyan
  Color get cyan500 => const Color(0XFF00CCCC);
  Color get cyan50001 => const Color(0XFF00C7E8);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray10001 => const Color(0XFFF5F5F5);
  Color get gray200 => const Color(0XFFEAEAEA);
  Color get gray300 => const Color(0XFFE5E5E5);
  Color get gray30001 => const Color(0XFFDDDDDD);
  Color get gray400 => const Color(0XFFC4C4C4);
  Color get gray40001 => const Color(0XFFB3B3B3);
  Color get gray600 => const Color(0XFF686B6F);
  Color get gray800 => const Color(0XFF404040);
  Color get gray850 => const Color(0XFF282828);
  Color get gray900 => const Color(0XFF121212);
  Color get gray90001 => const Color(0XFF1C1C1C);
  Color get gray90002 => const Color(0XFF1C1C1C);

  // Indigo
  Color get indigoA100 => const Color(0XFF93A0FF);

  // Pink
  Color get pink200 => const Color(0XFFED76C7);
  Color get pink300 => const Color(0XFFFF6699);

  // Purple
  Color get purple200 => const Color(0XFFC88BEC);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
